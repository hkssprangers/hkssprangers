service: hkssprangers
app: web
org: hkssprangers

provider:
  name: aws
  region: ap-southeast-1
  runtime: nodejs16.x
  apiGateway:
    binaryMediaTypes:
      - "*/*"
  environment:
    TZ: Asia/Hong_Kong
    DEPLOY_STAGE: ${env:DEPLOY_STAGE}
    SERVER_HOST: ${env:SERVER_HOST}
    COCKROACH_HOST: ${env:COCKROACH_HOST}
    COCKROACH_PORT: ${env:COCKROACH_PORT}
    COCKROACH_USER: ${env:COCKROACH_USER}
    COCKROACH_PASSWORD: ${env:COCKROACH_PASSWORD}
    COCKROACH_DATABASE: ${env:COCKROACH_DATABASE}
    TGBOT_TOKEN: ${env:TGBOT_TOKEN}
    FORM_READER_EMAIL: ${env:FORM_READER_EMAIL}
    FORM_READER_PRIVATE_KEY: ${env:FORM_READER_PRIVATE_KEY}
    JWT_SECRET: ${env:JWT_SECRET}
    TWILIO_SID: ${env:TWILIO_SID}
    TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
          Resource: "arn:aws:s3:::hkssprangers-uploads/*"
  logs:
    restApi:
      format: 'requestId: $context.requestId, ip: $context.identity.sourceIp, caller: $context.identity.caller, user: $context.identity.user, requestTime: $context.requestTime, httpMethod: $context.httpMethod, resourcePath: $context.resourcePath, status: $context.status, protocol: $context.protocol, responseLength: $context.responseLength, integrationErrorMessage: $context.integrationErrorMessage'

package:
  patterns:
    - '!.env'
    - '!.envrc'
    - '!.devcontainer/**'
    - '!.github/**'
    - '!.haxelib/**'
    - '!.vscode/**'
    - '!haxe_libraries/**'
    - '!lib/**'
    - '!src/**'
    - '!test/**'
    - '!terraform/**'
    - '!*.hxml'

functions:
  web:
    handler: index.handler
    events:
      - httpApi: '*'
  sendAttendancePoll:
    handler: cronjobs.sendAttendancePoll
    events:
      - schedule:
          # at HKT 11:00 and 17:00
          rate: cron(0 3,9 * * ? *)
          enabled: ${self:custom.isProd.${opt:stage}, false}
  sendDutyPoll:
    handler: cronjobs.sendDutyPoll
    events:
      - schedule:
          # at HKT 21:00, Sunday and Thursday
          rate: cron(0 13 ? * SUN,THU *)
          enabled: ${self:custom.isProd.${opt:stage}, false}

plugins:
  - serverless-prune-plugin

custom:
  prune:
    automatic: true
    number: 5
  isProd:
    production: true
